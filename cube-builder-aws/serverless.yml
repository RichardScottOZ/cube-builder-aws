# serverless.yml

service: ${env:PROJECT_NAME}

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dotenv-plugin

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
    slim: false
    zip: true

provider:
  name: aws
  runtime: python3.6
  stage: ${env:STAGE}
  region: ${env:REGION}

  environment:
    LAMBDA_FUNCTION_NAME: ${self:service}-${self:provider.stage}-app
    QUEUE_NAME: ${self:service}-${self:provider.stage}-queue
    KINESIS_NAME: ${self:service}-${self:provider.stage}-kinesis
    DYNAMO_TB_ACTIVITY: ${self:service}-${self:provider.stage}-act
    DBNAME_TB_CONTROL: ${self:service}-${self:provider.stage}-actControl
    KEY_ID: ${env:KEY_ID}
    SECRET_KEY: ${env:SECRET_KEY}
    RDS_HOST: ${env:RDS_HOST}
    RDS_DBNAME: ${env:RDS_DBNAME}
    RDS_USER: ${env:RDS_USER}
    RDS_PASSWORD: ${env:RDS_PASSWORD}
    URL_STAC: ${env:URL_STAC}
    BUCKET_NAME: ${env:BUCKET_NAME}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource:
        - Fn::GetAtt:
          - cubeBuilderQueue
          - Arn

    - Effect: "Allow"
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource:
        - Fn::GetAtt:
          - cubeBuilderQueueDLQ
          - Arn
          
    - Effect: "Allow"
      Action:
        - kinesis:GetRecords
        - kinesis:GetShardIterator
        - kinesis:DescribeStream
        - kinesis:ListStreams
      Resource:
        - Fn::GetAtt:
          - cubeBuilderKinesis
          - Arn

package:
  exclude:
    - node_modules/**
    - package-lock.json
    - cube_builder_aws/__pycache__/**
    - cube_builder_aws/utils/__pycache__/**
    - cube_builder_aws/.env

functions:
  app:
    handler: wsgi.handler
    timeout: 720
    memorySize: 512
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

  app_stream: 
    handler: app.continue_process
    timeout: 720
    memorySize: 3008
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - cubeBuilderQueue
              - Arn
      - stream:
          type: kinesis
          batchSize: 50
          arn:
            Fn::GetAtt:
              - cubeBuilderKinesis
              - Arn

resources:
  Resources:
    cubeBuilderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-queue
        VisibilityTimeout: 720
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - cubeBuilderQueueDLQ
              - Arn
          maxReceiveCount: 1

    cubeBuilderQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 500
        QueueName: ${self:service}-${self:provider.stage}-queueDLQ

    cubeBuilderKinesis:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-${self:provider.stage}-kinesis
        ShardCount: 1